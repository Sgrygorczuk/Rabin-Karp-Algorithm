 #include <math.h>

 double hashValue(char *text, int lenght, int p, int base)
 {
     double value = 0;
     double charInt = 0;
     for(int i = lenght - 1; i > -1 ; i--)
     {
     charInt = (int) *text;
     value += charInt*pow(base,i);
     value = fmod(value,p);
     *text++;
     }
     return value;

 }

 bool check(char* text, char* pattern, int length)
 {
     for(int i = 0; i < length; i++)
     {
         if(*text != *pattern)
         {
             return false;
         }
         *text++;
         *pattern++;
     }
     return true;
 }

 int substring(char *text, int k, int m, char *patterns[])
 {
     int p = 1009;
     int base = rand() % 1008 + 1;
     double HashValues [k];
     char *textPointer = text;
     char *textFollower = text;
     int textLenght = 0;
     double textValue =  hashValue(text, m, p,base);
     for (int i = 0; i < 2808; i++)
     {
         *text++;
     }

     for(int i = 0; i < k; i++)
     {
         HashValues[i] = hashValue(patterns[i],m,p,base);
     }

        while(*text != '\0')
     {
         *text++;
         textLenght++;
     }
     text = textPointer;
     for(int i = 0; i < m; i++)
     {
         if(i < m-1)
         {
             *textFollower++;
         }
         *text++;
     }

     for(int i = 0; i < textLenght-m+1; i++)
     {
         for(int j = 0; j < k; j++)
         {
             if(textValue == HashValues[j] && check(text,patterns[j],m))
             {
                 return j;
             }
         }
         *text++;
         textValue = hashValue(text, m, p,base);
     }
     return -1;
 }